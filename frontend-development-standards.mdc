---
alwaysApply: true
---

# 🚀 前端项目开发规范与最佳实践

> **配置类型**: Always规则  
> **适用范围**: 所有前端项目  
> **更新日期**: 2024年12月  
> **强制执行**: 是  
> **基于经验**: 实际项目开发问题总结  

---

## 📋 核心技术栈

### 必需依赖版本 (严格执行)

```json
{
  "vue": "^3.4.0",
  "typescript": "^5.3.0",
  "vue-tsc": "^3.0.6",
  "vite": "^5.0.0",
  "vue-router": "^4.2.0",
  "pinia": "^2.1.0",
  "element-plus": "^2.10.0",
  "@element-plus/icons-vue": "^2.3.0",
  "tailwindcss": "^3.4.0",
  "autoprefixer": "^10.4.0",
  "postcss": "^8.4.0",
  "@heroicons/vue": "^2.0.0",
  "@vueuse/core": "^10.7.0",
  "unplugin-auto-import": "^0.17.0",
  "unplugin-vue-components": "^0.26.0"
}
```

### 禁用依赖 ❌

- `@tailwindcss/vite` - 使用标准PostCSS配置
- Vue 2.x相关包 - 项目必须基于Vue 3
- 旧版本vue-tsc (< 3.0) - 会导致构建错误

---

## 🏗️ 项目结构规范

```
src/
├── components/
│   ├── ui/              # 可复用UI组件
│   └── layout/          # 布局组件
├── views/               # 页面组件
│   ├── auth/           # 认证相关
│   └── error/          # 错误页面
├── stores/             # Pinia状态管理
├── router/             # 路由配置
├── types/              # TypeScript类型定义
├── utils/              # 工具函数
├── assets/             # 静态资源
├── style.css           # 全局样式
├── App.vue             # 根组件
└── main.ts             # 入口文件
```

---

## 💻 核心配置文件

### 1. vite.config.ts (标准配置)

```typescript
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import AutoImport from 'unplugin-auto-import/vite'
import Components from 'unplugin-vue-components/vite'
import { ElementPlusResolver } from 'unplugin-vue-components/resolvers'
import { resolve } from 'path'

export default defineConfig({
  plugins: [
    vue(),
    AutoImport({
      resolvers: [ElementPlusResolver()],
      imports: ['vue', 'vue-router', 'pinia'],
      dts: true
    }),
    Components({
      resolvers: [ElementPlusResolver()]
    })
  ],
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src')
    }
  },
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          'element-plus': ['element-plus'],
          'vue-vendor': ['vue', 'vue-router', 'pinia']
        }
      }
    }
  }
})
```

### 2. postcss.config.js (TailwindCSS配置)

```javascript
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

### 3. tailwind.config.js (优化配置)

```javascript
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#fef7ed',
          100: '#fdedd3',
          200: '#fbd9a5',
          300: '#f8c06d',
          400: '#f59e0b',
          500: '#ea580c',
          600: '#dc2626',
          700: '#b91c1c',
          800: '#991b1b',
          900: '#7f1d1d',
        }
      }
    },
  },
  plugins: [],
}
```

---

## 🛡️ TypeScript类型安全规范

### 强制类型定义规范

#### ✅ 正确的数据结构

```typescript
// src/types/index.ts
export interface CardItem {
  id: string                    // ⚠️ 必须使用string，不能用number
  title: string
  description: string
  image: string
  category: string
  tags: string[]
  createTime: string            // ⚠️ 统一字段名，不用createdAt
  author: {                     // ⚠️ 必须使用对象结构
    name: string
    avatar: string
  }
  stats: {                      // ⚠️ 统计数据分组
    views: number
    likes: number
    comments: number
  }
}
```

#### ❌ 常见错误避免

```typescript
// 错误1: ID类型不一致
const card = { id: 1 }  // number
const find = cards.find(c => c.id === '1')  // string比较 ❌

// 错误2: 字段结构不匹配
const card = {
  author: 'John',    // 字符串 ❌
  likes: 100         // 直接在根级别 ❌
}

// 正确做法 ✅
const card: CardItem = {
  id: '1',           // string
  author: {          // 对象结构
    name: 'John',
    avatar: '/avatar.jpg'
  },
  stats: {           // 分组统计
    likes: 100,
    views: 500,
    comments: 25
  }
}
```

### TypeScript配置要求

```json
// tsconfig.json
{
  "compilerOptions": {
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  }
}
```

---

## 🎨 Vue组件开发规范

### 组件模板结构

```vue
<template>
  <!-- 使用语义化HTML -->
  <article class="card">
    <!-- 条件渲染优先v-if -->
    <div v-if="loading">加载中...</div>
    
    <!-- 列表必须有唯一key -->
    <div 
      v-for="item in items" 
      :key="item.id"
      @click="handleClick(item)"
    >
      {{ item.title }}
    </div>
  </article>
</template>

<script setup lang="ts">
// 1. 导入顺序：Vue -> 第三方 -> 本地
import { ref, computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import type { CardItem } from '@/types'

// 2. 类型定义
interface Props {
  items: CardItem[]
  loading?: boolean
}

// 3. Props定义
const props = withDefaults(defineProps<Props>(), {
  loading: false
})

// 4. 响应式状态
const selectedItem = ref<CardItem | null>(null)

// 5. 计算属性
const displayItems = computed(() => 
  props.items.filter(item => item.stats.views > 100)
)

// 6. 方法
const handleClick = (item: CardItem) => {
  selectedItem.value = item
}

// 7. 生命周期
onMounted(() => {
  // 初始化逻辑
})
</script>

<style scoped>
/* 优先使用TailwindCSS */
.card {
  @apply bg-white rounded-lg shadow-sm;
}
</style>
```

---

## 🚨 构建问题解决指南

### 常见构建错误及解决方案

#### 1. vue-tsc版本问题

```bash
# 错误: Search string not found supportedTSExtensions
# 解决: 升级vue-tsc版本
npm install vue-tsc@^3.0.6 -D
```

#### 2. TailwindCSS配置错误

```bash
# 错误: Cannot apply unknown utility class
# 原因: 使用了实验性@tailwindcss/vite插件
# 解决: 使用标准PostCSS配置

# 移除错误的依赖
npm uninstall @tailwindcss/vite

# 安装正确的依赖
npm install autoprefixer postcss
```

#### 3. TypeScript类型错误

```typescript
// 错误: Property 'likes' does not exist
card.likes  // ❌

// 解决: 使用正确的访问路径
card.stats.likes  // ✅

// 错误: Type 'number' is not assignable to type 'string'
{ id: 1 }  // ❌

// 解决: 使用正确的类型
{ id: '1' }  // ✅
```

---

## ⚡ 性能优化最佳实践

### 1. 组件懒加载

```typescript
// 路由懒加载
const routes = [
  {
    path: '/dashboard',
    component: () => import('@/views/DashboardView.vue')
  }
]

// 组件懒加载
const HeavyComponent = defineAsyncComponent(
  () => import('@/components/HeavyComponent.vue')
)
```

### 2. 图片优化

```vue
<template>
  <img 
    :src="card.image" 
    :alt="card.title"
    loading="lazy"
    class="w-full h-64 object-cover"
  />
</template>
```

### 3. 防抖节流

```typescript
import { debounce } from '@vueuse/core'

const searchQuery = ref('')
const debouncedSearch = debounce(async (query: string) => {
  if (query.trim()) {
    await searchCards(query)
  }
}, 300)

watch(searchQuery, debouncedSearch)
```

---

## 🔧 状态管理规范

### Pinia Store最佳实践

```typescript
// stores/cards.ts
import { defineStore } from 'pinia'
import type { CardItem } from '@/types'

export const useCardsStore = defineStore('cards', () => {
  // State
  const cards = ref<CardItem[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  // Getters
  const featuredCards = computed(() => 
    cards.value.filter(card => card.stats.likes > 100)
  )

  // Actions
  const fetchCards = async () => {
    loading.value = true
    try {
      const response = await api.getCards()
      cards.value = response.data
    } catch (err) {
      error.value = err instanceof Error ? err.message : 'Unknown error'
    } finally {
      loading.value = false
    }
  }

  return {
    // 只读状态
    cards: readonly(cards),
    loading: readonly(loading),
    error: readonly(error),
    // Getters
    featuredCards,
    // Actions
    fetchCards
  }
})
```

---

## 📚 代码示例模板

### 标准页面组件

```vue
<template>
  <div class="min-h-screen bg-gradient-to-br from-orange-50 to-amber-50">
    <!-- 加载状态 -->
    <div v-if="loading" class="flex justify-center py-12">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
    </div>

    <!-- 错误状态 -->
    <div v-else-if="error" class="text-center py-12">
      <p class="text-red-600">{{ error }}</p>
      <button @click="retry" class="mt-4 px-4 py-2 bg-orange-500 text-white rounded-lg">
        重试
      </button>
    </div>

    <!-- 内容区域 -->
    <div v-else>
      <!-- 页面内容 -->
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue'

const loading = ref(false)
const error = ref<string | null>(null)

const fetchData = async () => {
  loading.value = true
  error.value = null
  try {
    // API调用
  } catch (err) {
    error.value = err instanceof Error ? err.message : '加载失败'
  } finally {
    loading.value = false
  }
}

const retry = () => fetchData()

onMounted(() => {
  fetchData()
})
</script>
```

---

## 📋 检查清单

### 开发前检查

- [ ] ✅ 使用正确的依赖版本
- [ ] ✅ 配置PostCSS而非@tailwindcss/vite
- [ ] ✅ 设置TypeScript严格模式
- [ ] ✅ 配置自动导入插件

### 开发中检查

- [ ] ✅ 所有ID使用string类型
- [ ] ✅ 数据结构匹配类型定义
- [ ] ✅ 移除未使用的导入和变量
- [ ] ✅ 正确的错误处理

### 构建前检查

- [ ] ✅ `npm run build` 无错误
- [ ] ✅ TypeScript类型检查通过
- [ ] ✅ 无控制台警告
- [ ] ✅ 性能优化实施

---

## 🚀 Git工作流规范

### 提交信息规范

```bash
# 功能开发
git commit -m "feat: 添加用户认证功能"

# 问题修复
git commit -m "fix: 修复构建过程中TypeScript类型错误"

# 代码重构
git commit -m "refactor: 重构组件结构提升可维护性"

# 性能优化
git commit -m "perf: 优化图片加载性能"

# 文档更新
git commit -m "docs: 更新开发规范文档"
```

### 分支管理

```bash
# 主分支
main              # 生产环境代码

# 开发分支
develop           # 开发环境代码

# 功能分支
feature/user-auth # 新功能开发
hotfix/login-bug  # 紧急修复
```

---

## 📖 学习资源

### 官方文档
- [Vue 3 官方文档](https://vuejs.org/)
- [TypeScript 手册](https://www.typescriptlang.org/docs/)
- [TailwindCSS 文档](https://tailwindcss.com/docs)
- [Element Plus 文档](https://element-plus.org/)

### 实用工具
- [Vue DevTools](https://devtools.vuejs.org/)
- [TypeScript Playground](https://www.typescriptlang.org/play)
- [TailwindCSS IntelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss)

---

**⚠️ 重要提醒**

1. **版本兼容性**: 严格使用指定版本，避免兼容性问题
2. **类型安全**: 所有数据结构必须匹配TypeScript接口定义
3. **构建检查**: 每次提交前必须确保 `npm run build` 成功
4. **代码规范**: 遵循统一的命名规范和代码结构
5. **性能优化**: 实施懒加载、防抖等性能优化措施

---

**注意**: 本配置为强制执行的Always规则，所有前端项目必须严格遵循。如需修改，请通过正式流程申请审批。

---

*最后更新: 2024年12月*  
*版本: v2.0.0*  
*基于实际项目问题总结优化*